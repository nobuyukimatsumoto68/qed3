checking typedefs:
Vec3 = N5Eigen6MatrixIdLi3ELi1ELi0ELi3ELi1EEE


checking member variables of QfeLatticeS2:


int q = 5


std::vector<Vec3> r = 
(vertex coordinates)
0 : 0 0 1
1 :    -0.894427 -5.55112e-17    -0.447214
2 : -0.276393 -0.850651 -0.447214
3 : 0.276393 0.850651 0.447214
4 :  0.723607 -0.525731 -0.447214
5 : -0.723607  0.525731  0.447214
6 :  0  0 -1
7 :  0.723607  0.525731 -0.447214
8 : -0.723607 -0.525731  0.447214
9 :  0.276393 -0.850651  0.447214
10 : -0.276393  0.850651 -0.447214
11 :    0.894427 5.55112e-17    0.447214

(counter = 12 elements)

std::vector<int> antipode = 
(antipode of each site (0 by default))
0 : 0
1 : 0
2 : 0
3 : 0
4 : 0
5 : 0
6 : 0
7 : 0
8 : 0
9 : 0
10 : 0
11 : 0

(counter = 12 elements)

std::vector<int> site_orbit = 
(orbit id for each site)
0 : 0
1 : 0
2 : 0
3 : 0
4 : 0
5 : 0
6 : 0
7 : 0
8 : 0
9 : 0
10 : 0
11 : 0

(counter = 12 elements)

std::vector<int> face_orbit = 
(orbit id for each face)
0 : 0
1 : 0
2 : 0
3 : 0
4 : 0
5 : 0
6 : 0
7 : 0
8 : 0
9 : 0
10 : 0
11 : 0
12 : 0
13 : 0
14 : 0
15 : 0
16 : 0
17 : 0
18 : 0
19 : 0

(counter = 20 elements)

std::vector<Vec3> orbit_xi = 
(barycentric coordinates for each orbit)
0 : 1 0 0

(counter = 1 elements)

Vec3 first_face_r[4] = 
(coordinates of first face vertices)
0 : 0 0 1
1 : 0.276393 0.850651 0.447214
2 : -0.723607  0.525731  0.447214
3 :   6.147e-310 -1.27018e-92         -nan


std::vector<GrpElemO3> G = 
(symmetry group elements)
0 : 0i + 0j + 0k + 1
1 : 0i + 0j + 0.587785k + 0.809017
2 : 0.425325i + 0.309017j + 0.688191k + 0.5
3 : 0i + 0j + 0.951057k + 0.309017
4 : 0.16246i + 0.5j + 0.850651k + 0
5 : 0.525731i + 0j + 0.850651k + 0
6 : -0.425325i + -0.309017j + -0.688191k + 0.5
7 : 0i + 0j + -0.951057k + 0.309017
8 : 0.16246i + -0.5j + -0.688191k + 0.5
9 : -0.425325i + -0.309017j + -0.688191k + 0.5
10 : -0.16246i + -0.5j + -0.262866k + 0.809017
11 : -0.425325i + 0.309017j + -0.688191k + 0.5
12 : 0i + 0j + -0.587785k + 0.809017
13 : -0.525731i + 0j + -0.262866k + 0.809017
14 : 0i + 0j + 0k + 1
15 : 0.425325i + -0.309017j + -0.262866k + 0.809017
16 : -0.16246i + -0.5j + -0.262866k + 0.809017
17 : 0.16246i + -0.5j + 0.262866k + 0.809017
18 : -0.525731i + 0j + -0.262866k + 0.809017
19 : -0.425325i + -0.309017j + 0.262866k + 0.809017
20 : 0i + 0j + 0.587785k + 0.809017
21 : -0.16246i + 0.5j + -0.262866k + 0.809017
22 : 0.425325i + 0.309017j + -0.262866k + 0.809017
23 : 0.525731i + 0j + 0.262866k + 0.809017
24 : -0.425325i + 0.309017j + 0.262866k + 0.809017
25 : 0.16246i + 0.5j + 0.262866k + 0.809017
26 : 0.425325i + 0.309017j + 0.688191k + 0.5
27 : 0.16246i + -0.5j + 0.262866k + 0.809017
28 : 0.425325i + -0.309017j + 0.688191k + 0.5
29 : -0.425325i + -0.309017j + 0.262866k + 0.809017
30 : -0.16246i + -0.5j + 0.688191k + 0.5
31 : 0i + 0j + 0.951057k + 0.309017
32 : -0.425325i + 0.309017j + 0.262866k + 0.809017
33 : 0.16246i + 0.5j + 0.262866k + 0.809017
34 : -0.525731i + 0j + 0.688191k + 0.5
35 : -0.16246i + 0.5j + 0.688191k + 0.5
36 : 0.16246i + 0.5j + 0.850651k + 0
37 : 0.688191i + 0.5j + 0.16246k + 0.5
38 : 0.525731i + 0j + 0.262866k + 0.809017
39 : 0.850651i + 0j + 0.425325k + 0.309017
40 : 0.425325i + -0.309017j + 0.688191k + 0.5
41 : 0.525731i + 0j + 0.850651k + 0
42 : -0.16246i + 0.5j + 0.688191k + 0.5
43 : 0.262866i + 0.809017j + 0.425325k + 0.309017
44 : 0.688191i + 0.5j + 0.525731k + 0
45 : -0.16246i + -0.5j + 0.688191k + 0.5
46 : 0.16246i + -0.5j + 0.850651k + 0
47 : 0i + 0j + -0.951057k + 0.309017
48 : -0.525731i + 0j + 0.688191k + 0.5
49 : 0.425325i + 0.309017j + -0.850651k + 0
50 : 0.425325i + -0.309017j + -0.850651k + 0
51 : 0.16246i + -0.5j + -0.688191k + 0.5
52 : 0.262866i + 0.809017j + 0.425325k + 0.309017
53 : 0.688191i + 0.5j + 0.525731k + 0
54 : 0.425325i + -0.309017j + -0.850651k + 0
55 : 0.262866i + -0.809017j + -0.525731k + 0
56 : -0.262866i + -0.809017j + -0.425325k + 0.309017
57 : 0.850651i + 0j + 0.425325k + 0.309017
58 : -0.850651i + 0j + -0.425325k + 0.309017
59 : 0.688191i + -0.5j + 0.525731k + 0
60 : -0.425325i + 0.309017j + -0.688191k + 0.5
61 : 0.16246i + -0.5j + 0.850651k + 0
62 : 0i + 0j + -0.587785k + 0.809017
63 : -0.262866i + -0.809017j + -0.425325k + 0.309017
64 : -0.688191i + -0.5j + -0.16246k + 0.5
65 : -0.850651i + 0j + -0.425325k + 0.309017
66 : 0.425325i + 0.309017j + -0.850651k + 0
67 : 0.16246i + 0.5j + -0.688191k + 0.5
68 : 0.525731i + 0j + -0.688191k + 0.5
69 : 0.425325i + -0.309017j + -0.262866k + 0.809017
70 : 0.262866i + -0.809017j + -0.525731k + 0
71 : 0.525731i + 0j + -0.688191k + 0.5
72 : 0.688191i + -0.5j + -0.425325k + 0.309017
73 : 0.262866i + -0.809017j + -0.16246k + 0.5
74 : -0.688191i + -0.5j + -0.16246k + 0.5
75 : 0.262866i + -0.809017j + -0.16246k + 0.5
76 : -0.262866i + -0.809017j + 0.16246k + 0.5
77 : 0.688191i + -0.5j + 0.525731k + 0
78 : -0.688191i + 0.5j + -0.16246k + 0.5
79 : -0.16246i + 0.5j + -0.262866k + 0.809017
80 : -0.262866i + 0.809017j + -0.425325k + 0.309017
81 : 0.425325i + 0.309017j + -0.262866k + 0.809017
82 : 0.16246i + 0.5j + -0.688191k + 0.5
83 : -0.850651i + 0j + 0.16246k + 0.5
84 : -0.688191i + 0.5j + -0.16246k + 0.5
85 : 0.688191i + -0.5j + -0.425325k + 0.309017
86 : 0.850651i + 0j + -0.16246k + 0.5
87 : 0.688191i + -0.5j + 0.16246k + 0.5
88 : -0.262866i + -0.809017j + 0.16246k + 0.5
89 : 0.688191i + -0.5j + 0.16246k + 0.5
90 : 0.262866i + -0.809017j + 0.425325k + 0.309017
91 : -0.850651i + 0j + 0.16246k + 0.5
92 : -0.688191i + -0.5j + 0.425325k + 0.309017
93 : -0.262866i + 0.809017j + -0.425325k + 0.309017
94 : -0.262866i + 0.809017j + 0.16246k + 0.5
95 : 0.262866i + 0.809017j + -0.16246k + 0.5
96 : 0.688191i + 0.5j + 0.16246k + 0.5
97 : 0.262866i + 0.809017j + -0.16246k + 0.5
98 : 0.688191i + 0.5j + -0.425325k + 0.309017
99 : 0.850651i + 0j + -0.16246k + 0.5
100 : -0.688191i + 0.5j + 0.425325k + 0.309017
101 : -0.262866i + 0.809017j + 0.16246k + 0.5
102 : 0.262866i + -0.809017j + 0.425325k + 0.309017
103 : -0.688191i + -0.5j + 0.425325k + 0.309017
104 : 0.262866i + 0.809017j + -0.525731k + 0
105 : -0.688191i + 0.5j + 0.425325k + 0.309017
106 : 0.850651i + 0j + -0.525731k + 0
107 : 0.688191i + 0.5j + -0.425325k + 0.309017
108 : 0.587785i + 0.809017j + 0k + 0
109 : 0.951057i + 0.309017j + 0k + 0
110 : 0.951057i + 0.309017j + 0k + 0
111 : 0.951057i + -0.309017j + 0k + 0
112 : 0i + 1j + 0k + 0
113 : 0.587785i + 0.809017j + 0k + 0
114 : 0.262866i + 0.809017j + -0.525731k + 0
115 : 0.850651i + 0j + -0.525731k + 0
116 : 0i + 1j + 0k + 0
117 : 0.587785i + -0.809017j + 0k + 0
118 : 0.951057i + -0.309017j + 0k + 0
119 : 0.587785i + -0.809017j + 0k + 0

(counter = 120 elements)

std::vector<int> site_g = 
(group element for each site)
0 : 0
1 : 2
2 : 4
3 : 6
4 : 8
5 : 10
6 : 14
7 : 15
8 : 17
9 : 22
10 : 23
11 : 26

(counter = 12 elements)

std::vector<std::vector<Complex>> ylm = 
(spherical harmonics)
0 : (counter2 = 0 elements)

1 : (counter2 = 0 elements)

2 : (counter2 = 0 elements)

3 : (counter2 = 0 elements)

4 : (counter2 = 0 elements)

5 : (counter2 = 0 elements)

6 : (counter2 = 0 elements)

7 : (counter2 = 0 elements)

8 : (counter2 = 0 elements)

9 : (counter2 = 0 elements)

10 : (counter2 = 0 elements)

11 : (counter2 = 0 elements)

(counter1 = 12 elements)

inherited from QfeLattice:


int n_sites = 12


int n_links = 30


int n_faces = 20


int n_cells = 0


double vol = 12


std::vector<QfeSite> sites = 
0 : 
wt = 1
nn = 5
links = 0 2 4 6 8 
neighbors = 3 5 11 8 9 
id = 0

1 : 
wt = 1
nn = 5
links = 10 12 14 15 17 
neighbors = 2 6 8 5 10 
id = 0

2 : 
wt = 1
nn = 5
links = 10 11 13 19 22 
neighbors = 1 6 8 4 9 
id = 0

3 : 
wt = 1
nn = 5
links = 0 1 3 23 24 
neighbors = 0 5 11 10 7 
id = 0

4 : 
wt = 1
nn = 5
links = 19 20 21 28 29 
neighbors = 2 6 9 7 11 
id = 0

5 : 
wt = 1
nn = 5
links = 1 2 5 15 16 
neighbors = 3 0 8 1 10 
id = 0

6 : 
wt = 1
nn = 5
links = 11 12 18 20 27 
neighbors = 2 1 10 4 7 
id = 0

7 : 
wt = 1
nn = 5
links = 24 25 26 27 28 
neighbors = 3 10 11 6 4 
id = 0

8 : 
wt = 1
nn = 5
links = 5 6 7 13 14 
neighbors = 5 0 9 2 1 
id = 0

9 : 
wt = 1
nn = 5
links = 7 8 9 21 22 
neighbors = 8 0 11 4 2 
id = 0

10 : 
wt = 1
nn = 5
links = 16 17 18 23 25 
neighbors = 5 1 6 3 7 
id = 0

11 : 
wt = 1
nn = 5
links = 3 4 9 26 29 
neighbors = 3 0 9 7 4 
id = 0

(counter = 12 elements)

std::vector<QfeLink> links = 
0 : 
wt = 1
sites = 0 3 
n_faces = 2
faces = 0 1 

1 : 
wt = 1
sites = 3 5 
n_faces = 2
faces = 0 13 

2 : 
wt = 1
sites = 5 0 
n_faces = 2
faces = 0 2 

3 : 
wt = 1
sites = 3 11 
n_faces = 2
faces = 1 15 

4 : 
wt = 1
sites = 11 0 
n_faces = 2
faces = 1 4 

5 : 
wt = 1
sites = 5 8 
n_faces = 2
faces = 2 7 

6 : 
wt = 1
sites = 8 0 
n_faces = 2
faces = 2 3 

7 : 
wt = 1
sites = 8 9 
n_faces = 2
faces = 3 12 

8 : 
wt = 1
sites = 9 0 
n_faces = 2
faces = 3 4 

9 : 
wt = 1
sites = 9 11 
n_faces = 2
faces = 4 18 

10 : 
wt = 1
sites = 1 2 
n_faces = 2
faces = 5 6 

11 : 
wt = 1
sites = 2 6 
n_faces = 2
faces = 5 10 

12 : 
wt = 1
sites = 6 1 
n_faces = 2
faces = 5 9 

13 : 
wt = 1
sites = 2 8 
n_faces = 2
faces = 6 12 

14 : 
wt = 1
sites = 8 1 
n_faces = 2
faces = 6 7 

15 : 
wt = 1
sites = 1 5 
n_faces = 2
faces = 7 8 

16 : 
wt = 1
sites = 5 10 
n_faces = 2
faces = 8 13 

17 : 
wt = 1
sites = 10 1 
n_faces = 2
faces = 8 9 

18 : 
wt = 1
sites = 6 10 
n_faces = 2
faces = 9 19 

19 : 
wt = 1
sites = 2 4 
n_faces = 2
faces = 10 11 

20 : 
wt = 1
sites = 4 6 
n_faces = 2
faces = 10 16 

21 : 
wt = 1
sites = 4 9 
n_faces = 2
faces = 11 18 

22 : 
wt = 1
sites = 9 2 
n_faces = 2
faces = 11 12 

23 : 
wt = 1
sites = 10 3 
n_faces = 2
faces = 13 14 

24 : 
wt = 1
sites = 3 7 
n_faces = 2
faces = 14 15 

25 : 
wt = 1
sites = 7 10 
n_faces = 2
faces = 14 19 

26 : 
wt = 1
sites = 7 11 
n_faces = 2
faces = 15 17 

27 : 
wt = 1
sites = 6 7 
n_faces = 2
faces = 16 19 

28 : 
wt = 1
sites = 7 4 
n_faces = 2
faces = 16 17 

29 : 
wt = 1
sites = 11 4 
n_faces = 2
faces = 17 18 

(counter = 30 elements)

std::vector<QfeFace> faces = 
0 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 1 2 0 
sites = 0 3 5 

1 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 3 4 0 
sites = 0 3 11 

2 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 5 6 2 
sites = 0 5 8 

3 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 7 8 6 
sites = 0 8 9 

4 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 9 4 8 
sites = 0 9 11 

5 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 11 12 10 
sites = 1 2 6 

6 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 13 14 10 
sites = 1 2 8 

7 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 5 14 15 
sites = 1 5 8 

8 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 16 17 15 
sites = 1 5 10 

9 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 18 17 12 
sites = 1 6 10 

10 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 20 11 19 
sites = 2 4 6 

11 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 21 22 19 
sites = 2 4 9 

12 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 7 22 13 
sites = 2 8 9 

13 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 16 23 1 
sites = 3 5 10 

14 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 25 23 24 
sites = 3 7 10 

15 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 26 3 24 
sites = 3 7 11 

16 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 27 28 20 
sites = 4 6 7 

17 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 26 29 28 
sites = 4 7 11 

18 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 9 29 21 
sites = 4 9 11 

19 : 
wt = 1
n_edges = 3
n_cells = 0
cells = 
edges = 25 18 27 
sites = 6 7 10 

(counter = 20 elements)

std::vector<QfeCell> cells = 
(counter = 0 elements)

